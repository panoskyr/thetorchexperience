{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# imports\nfrom torch.utils.data import Dataset, DataLoader\nfrom PIL import Image\nimport skimage\nfrom skimage.color import gray2rgb\nfrom torchvision import transforms,io\nimport torchvision\nimport torch\nfrom torch.nn import Sigmoid\nfrom torchvision.models import ResNet18_Weights","metadata":{"execution":{"iopub.status.busy":"2023-06-23T11:34:18.005994Z","iopub.execute_input":"2023-06-23T11:34:18.006871Z","iopub.status.idle":"2023-06-23T11:34:18.015447Z","shell.execute_reply.started":"2023-06-23T11:34:18.006821Z","shell.execute_reply":"2023-06-23T11:34:18.014125Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2023-06-23T12:12:12.553762Z","iopub.execute_input":"2023-06-23T12:12:12.554251Z","iopub.status.idle":"2023-06-23T12:12:12.599723Z","shell.execute_reply.started":"2023-06-23T12:12:12.554217Z","shell.execute_reply":"2023-06-23T12:12:12.597996Z"},"trusted":true},"execution_count":16,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","Cell \u001b[0;32mIn[16], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorcheval\u001b[39;00m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'torcheval'"],"ename":"ModuleNotFoundError","evalue":"No module named 'torcheval'","output_type":"error"}]},{"cell_type":"code","source":"import os\nos.listdir('/kaggle/input/mura-v11/')","metadata":{"execution":{"iopub.status.busy":"2023-06-23T12:08:25.314458Z","iopub.execute_input":"2023-06-23T12:08:25.314932Z","iopub.status.idle":"2023-06-23T12:08:25.351744Z","shell.execute_reply.started":"2023-06-23T12:08:25.314898Z","shell.execute_reply":"2023-06-23T12:08:25.350835Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"['MURA_fn_dev.csv', 'MURA_fn_train.csv', 'MURA-v1.1']"},"metadata":{}}]},{"cell_type":"code","source":"class class6_Dataset(Dataset):\n    def __init__(self, df, transform=None):\n        self.df = df\n        self.transform=transform\n        if self.transform is None:\n            self.transform = ResNet18_Weights.DEFAULT.transforms()\n        else:\n            self.transform = transform\n        #mapping alphabetically\n        self.labels = self.df['Bone'].map({\n            'XR_ELBOW': 0,\n            'XR_FINGER': 1,\n            'XR_FOREARM': 2,\n            'XR_HAND': 3,\n            'XR_HUMERUS': 4,\n            'XR_SHOULDER': 5,\n            'XR_WRIST': 6\n        })\n        \n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, idx):\n        path=self.df['path'].iloc[idx]\n        pil_img=Image.open(path).convert('RGB')\n        #print(\"pil_img shape:\",pil_img.size,\"pil_img mode:\",pil_img.mode)\n        img=self.transform(pil_img)\n        img=torchvision.transforms.functional.convert_image_dtype(img,torch.float32)\n        return img, self.labels.iloc[idx]\nclass ResnetTransfer(torch.nn.Module):\n    def __init__(self, train_resnet=True):\n        super().__init__()\n\n        self.train_resnet = train_resnet\n\n        # first training pass with resnet unfrozen\n        # to take info about classes\n        # initialize with pretrained weights\n        weights=torchvision.models.ResNet18_Weights.DEFAULT\n        resnet18 = torchvision.models.resnet18(weights=weights)\n        self.resnet=resnet18\n        # allow training of parameters\n        for param in self.resnet.parameters():\n            param.requires_grad=True\n\n        #add a head to the resnet that outputs 7 class probabilities\n        self.resnet.fc=torch.nn.Linear(self.resnet.fc.in_features,7)\n        for param in self.resnet.fc.parameters():\n            param.requires_grad=True\n            \n        self.softmax=torch.nn.Softmax(dim=1)\n    \n    def forward(self, x):\n        x=self.resnet(x)\n        if self.train_resnet is True:\n            x=self.softmax(x)\n        else:\n            x = Sigmoid(x)\n        return x\n\n    def trigger_phase2(self):\n\n        if self.train_resnet is True:\n            self.train_resnet = False\n            \n            #we keep the previous training of resnet\n            # and add a new head that will output 1 class probability\n            for param in self.resnet.parameters():\n                param.requires_grad=False\n            \n            # the new head will be trained from scratch\n            self.resnet.fc=torch.nn.Linear(self.resnet.fc.in_features,1)\n\n        else:\n            return\n\n    def __str__(self):\n        return f\"ResnetTransfer(frozen={self.train_resnet}, output_size={self.resnet.fc.out_features})\"\n\n\n","metadata":{"execution":{"iopub.status.busy":"2023-06-23T11:35:15.289223Z","iopub.execute_input":"2023-06-23T11:35:15.289910Z","iopub.status.idle":"2023-06-23T11:35:15.308910Z","shell.execute_reply.started":"2023-06-23T11:35:15.289862Z","shell.execute_reply":"2023-06-23T11:35:15.307870Z"},"trusted":true},"execution_count":7,"outputs":[]}]}